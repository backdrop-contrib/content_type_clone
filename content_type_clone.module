<?php
/**
 * @file
 * Content Type Clone primary module file.
 */

/**
 * Generate a default item number for a new clone.
 *
 * This function will add the clone number to the machine name, the title
 * and the description fields in the content type creation form.
 *
 * The clone number is based on the number of existing clones
 * for the content type being cloned.
 *
 * @param $node_type_prefix
 *   The default prefix defined for the new content type.
 */
function content_type_clone_get_next_type_number($node_type_prefix) {
  //get node types
  $node_types = array_keys(node_type_get_types());

  //prepare the search pattern
  $pattern = '/^' . $node_type_prefix . '/';

  //count existing prefix occurences
  $occurences  = count(preg_grep($pattern, $node_types));

  //return an incremented value
  return $occurences + 1;
}

/**
 * Create a content type clone.
 *
 * This function creates the new content type and adds the cloned fields.
 *
 * @param $values
 *   Form values coming from the content type creation form.
 */
function content_type_clone_create($values) {
  //create the type definition array.
  $type = array(
  'type' => $values['target_machine_name'],
  'name' => t($values['target_name']),
  'base' => 'node_content',
  'description' => t($values['target_description']),
  'custom' => 1,
  'modified' => 1,
  'locked' => 0
  );

  //set the type defaults
  $type = node_type_set_defaults($type);

  //save the ndoe type
  node_type_save($type);

  //add body field
  node_add_body_field($type);

  //prepare the operations array
  $operations = array();

  //get node type base fields
  $base_fields = field_info_instances('node', $values['source_machine_name']);

  //get node type extra fields
  $extra_fields = field_info_extra_fields('node', $values['source_machine_name'], 'form');

  //merge all fields
  $all_fields = array_merge($base_fields, $extra_fields);

  //create new fields
  foreach ($all_fields as $name => $instance) {
    $operations[] = array('content_type_clone_set_target_field', array($instance, $name, $values));
  }

  //also clone the nodes if requested
  if ((int) $values['clone_source_nodes'] == 1) {
    //load all nodes for the source content type
    $nodes = node_load_multiple(array(), array('type' => $values['source_machine_name']));

    //loop through each node
    foreach ($nodes as $node) {
      //add an operation
      $operations[] = array('content_type_clone_copy_node', array($node, $values));
    }
  }

  //define batch operation
  $batch = array(
  'title' => t('Clone content type'),
  'operations' => $operations,
  'finished' => 'content_type_clone_finished',
  'init_message' => t('Operation in progress...'),
  'progress_message' => t('Task @current/@total'),
  'error_message' => t('An error has occurred please try again.'),
  );

  return $batch;
}

/**
 * Batch operation finished
 *
 * This function displays a message after the batch operation ends.
 *
 * @param $success
 *   The batch status.
 *
 * @param $results
 *   The batch results array.
 *
 * @param $operations
 *   The batch operations array.
 */
function content_type_clone_finished($success, $results, $operations) {
  //test the results
  if ($success) {
    drupal_set_message(t('The "@source_name" content type, @field_count fields and @node_count nodes have been cloned successfully.', array('@source_name' => $results['source_name'], '@field_count' => $results['field_count'], '@node_count' => $results['node_count'])));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }

  //redirect to the content types list
  drupal_goto('/admin/structure/types');
}

/**
 * Clone a node
 *
 * This function copies a node from the source content type to the target content type.
 *
 * @param $source_node
 *   The node to clone.
 *
 * @param $values
 *   Values from the content type clone form.
 *
 * @param $context
 *   The batch operations context.
 */
function content_type_clone_copy_node($source_node, $values, &$context) {
  //slow down the process for visibility
  sleep(0.5);

  //progress context results
  $context['results'][] = 'nid' . $source_node->nid;

  //update the node count
  $context['results']['node_count']++;

  //progress context message
  $context['message'] = t('Cloning node') . ' ' . $source_node->title;

  //copy the source node
  $target_node = clone $source_node;

  //unset version and node id's
  unset($target_node->nid);
  unset($target_node->vid);
  unset($target_node->path);

  //set target node type
  $target_node->type = $values['target_machine_name'];

  //set the target node title
  if (module_exists('token')) {
    $target_node->title = token_replace($values['title_pattern'], array('node' => $target_node));
  }
  else {
    $target_node->title = t('Clone of') . ' ' . $source_node->title;
  }

  //save the copy
  node_save($target_node);

  //delete the source node if required
  if ((int) $values['delete_source_nodes'] == 1) {
    node_delete($source_node->nid);
  }

  //update progress
  _content_type_clone_update_http_requests();
}

/**
 * Create a field.
 *
 * This function creates a field for a cloned content type.
 *
 * @param $instance
 *   The newly created content type.
 *
 * @param $field_name
 *   The name of the field in the source content type.
 *
 * @param $values
 *   Form values coming from the content type creation form.
 */
function content_type_clone_set_target_field($instance, $field_name, $values, &$context) {
  //slow down the progress for visibility
  sleep(0.5);

  //progress context results
  $context['results'][] = $field_name;

  //pass the cloned content type name to context
  $context['results']['source_name'] = $values['source_name'];

  //update the field count
  $context['results']['field_count']++;

  //progress context message
  $context['message'] = t('Cloning field') . ' ' . $field_name;

  //verify the field does not already exist.
  if ($field_name != 'body' && $field_name != 'title') {
    //if field doesn't exist, create
    if (!field_info_field($field_name)) {
      $field = field_info_field($field_name);
      $field = field_create_field($field);
    }

    //set the new bundle name
    $instance['bundle'] = $values['target_machine_name'];
    $instance['field_name'] = $field_name;

    //create an instance of the field and bind it to the bundle.
    field_create_instance($instance);
  }

  //update progress
  _content_type_clone_update_http_requests();
}

/**
 * Redirect to the content type clone form
 *
 * This function redirects the user to the content type clone form.
 *
 * @param $node_type
 *   The node type needing cloning.
 */
function content_type_clone_menu_redirect($node_type) {
  //redirect the user
  drupal_goto('admin/' . $node_type->type . '/clone/create');
}

/**
 * Utility function to increment HTTP requests in a session variable.
 */
function _content_type_clone_update_http_requests() {
  $_SESSION['http_request_count']++;
}

/**
 * Utility function to count the HTTP requests in a session variable.
 *
 * @return int
 *   Number of requests.
 */
function _content_type_clone_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}

/**
 * Implements hook_init().
 */
function content_type_clone_init() {
  //add css if required
  if (arg(0) == 'admin' && arg(2) == 'clone' && arg(3) == 'create') {
    drupal_add_css(drupal_get_path('module', 'content_type_clone') . '/css/admin.css', array('group' => CSS_THEME, 'type' => 'file'));
  }
}

/**
 * Implements hook_menu().
 */
function content_type_clone_menu() {
  //content type clone form url
  $items['admin/%/clone/create'] = array(
  'title' => '',
  'access arguments' => array('administer content types'),
  'page callback' => 'drupal_get_form',
  'page arguments' => array('content_type_clone_create_form', 1),
  'type' => MENU_CALLBACK
  );

  $items['admin/structure/types/manage/%node_type/clone'] = array(
  'title' => 'Clone',
  'access arguments' => array('administer content types'),
  'page callback' => 'content_type_clone_menu_redirect',
  'page arguments' => array(4)
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function content_type_clone_page_alter(&$page) {
  if ($_GET['q'] == 'admin/structure/types') {
    //increment the node types list table colspan for the new link
    $page['content']['system_main']['node_table']['#header'][1]['colspan']++;

    //loop through all node types found in the list
    foreach ($page['content']['system_main']['node_table']['#rows'] as $key => &$row) {
      //get the edit link of the content type
      $str = $row[1]['data'];

      //find the machine name
      preg_match('/admin\/structure\/types\/manage\/([a-zA-Z0-9_-]+)/', $str, $match);

      //if machine name is found
      if (isset($match[1])) {
        $machine_name = str_replace(' ', '', $match[1]);
        //add link
        $row[] = l(t('clone'), 'admin/' . $machine_name . '/clone/create');
      }
    }
  }
}

/**
 * Implements hook_form().
 */
function content_type_clone_create_form($form, &$form_state, $machine_name) {
  //load the node type from machine name
  $node_type = node_type_load($machine_name);

  //prepare the new node type machine name prefix
  $node_type_prefix = $node_type->type . '_clone';

  //get the next occurence count
  $num = content_type_clone_get_next_type_number($node_type_prefix);

  //source fieldset
  $form['fieldset_1'] = array(
  '#type' => 'fieldset',
  '#title' => t('Content type source'),
  '#collapsible' => TRUE,
  '#collapsed' => TRUE,
  );

  //source node type name field
  $form['fieldset_1']['source_name'] = array(
  '#type' => 'textfield',
  '#title' => t('Name'),
  '#default_value' => $node_type->name,
  '#required' => TRUE,
  '#attributes' => array('readonly' => 'readonly', 'class' => array('ctc-readonly'))
  );

  //source node type machine name field
  $form['fieldset_1']['source_machine_name'] = array(
  '#type' => 'textfield',
  '#title' => t('Machine name'),
  '#default_value' => $node_type->type,
  '#required' => TRUE,
  '#attributes' => array('readonly' => 'readonly', 'class' => array('ctc-readonly'))
  );

  //source node type description field
  $form['fieldset_1']['source_description'] = array(
  '#type' => 'textarea',
  '#title' => t('Description'),
  '#default_value' => $node_type->description,
  '#attributes' => array('readonly' => 'readonly', 'class' => array('ctc-readonly'))
  );

  //target fieldset
  $form['fieldset_2'] = array(
  '#type' => 'fieldset',
  '#title' => t('Content type target'),
  '#collapsible' => FALSE,
  '#collapsed' => FALSE
  );

  //target node type name field
  $default_value = 'Clone of' . ' ' . $node_type->name . ' (' . $num . ')';
  $form['fieldset_2']['target_name'] = array(
  '#type' => 'textfield',
  '#title' => t('Name'),
  '#default_value' => t($default_value),
  '#token' => FALSE,
  '#required' => TRUE
  );

  //target type machine name field
  $form['fieldset_2']['target_machine_name'] = array(
  '#type' => 'textfield',
  '#title' => t('Machine name'),
  '#default_value' => t($node_type_prefix . '_' . $num),
  '#required' => TRUE
  );

  //source node type description field
  $form['fieldset_2']['target_description'] = array(
  '#type' => 'textarea',
  '#title' => t('Description'),
  '#default_value' => t('Description of') . ' ' . $node_type->name . ' (' . $num . ')'
  );

  $form['fieldset_2']['clone_source_nodes'] = array(
  '#type' => 'checkbox',
  '#title' => t('Copy all nodes from the source content type to the target content type')
  );

  $form['fieldset_2']['delete_source_nodes'] = array(
  '#type' => 'checkbox',
  '#title' => t('Delete all nodes from the source content type after they have been copied to the target content type')
  );

  //token fieldset
  $form['fieldset_3'] = array(
  '#type' => 'fieldset',
  '#title' => t('Replacement patterns'),
  '#collapsible' => TRUE,
  '#collapsed' => TRUE
  );

  //token fields
  if (module_exists('token')) {
    //display the node title pattern field
    $default_value = t('Clone of') . ' ' . '[node:title]';
    $form['fieldset_3']['title_pattern'] = array(
    '#type' => 'textfield',
    '#title' => t('Node title pattern'),
    '#default_value' => $default_value,
    '#token' => FALSE,
    '#required' => TRUE
    );

    //list available tokens
    $form['fieldset_3']['token_tree_link'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('node'),
    '#global_types' => TRUE,
    '#click_insert' => TRUE
    );
  }
  else {
    $form['fieldset_3']['token_tree'] = array(
    '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
    );
  }

  //submit button
  $form['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Generate')
  );

  //return the form
  return $form;
}

/**
 * Implements hook_form_validate().
 */
function content_type_clone_create_form_validate($form, &$form_state) {
  if ($form['#form_id'] == 'content_type_clone_create_form') {
    //get node types
    $node_types = array_keys(node_type_get_types());

    //if the machine name already exists
    if (in_array($form_state['values']['target_machine_name'], $node_types)) {
      form_set_error('target_machine_name', t('The content type name provided already exists'));
    }

    //add the custom form submit handler
    $form['#submit'][] = 'content_type_clone_create_form_submit';
  }
}

/**
 * Implements hook_form_submit().
 */
function content_type_clone_create_form_submit($form, &$form_state) {
  if ($form['#form_id'] == 'content_type_clone_create_form') {
    //batch function name
    $function = 'content_type_clone_create';

    //reset counter for debug information.
    $_SESSION['http_request_count'] = 0;

    //execute the function named batch_example_1 or batch_example_2.
    $batch = $function($form_state['values']);
    batch_set($batch);
  }
}